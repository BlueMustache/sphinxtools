//--------------------------------------
//--- 010 Editor v6.0.3 Binary Template
//
// File: Sphinx Filelist.bin descriptor
// Author: Swyter
// Revision: 2016-02-28
// Purpose: For the GameCube/PAL version
//--------------------------------------
uint unk;
uint total_size <format=hex>;
uint list_item_count;
uint unk_b <format=hex>;
uint next_section <format=hex>; // + 10h (address relative to this field)
struct
{
    uint len;
    uint hash <format=hex>;
    uint ver;
    uint unk_flags <format=hex>;
    uint always_one;
    uint loc_addr <format=hex>;
    uint loc_file;
}list_item[list_item_count];

   Printf("File:    %s    \n Len:    %u    \n Ver:    %u    \nHash:    %#x   \n Loc:    %u:%000u", "asdf", 1, 1, 1, 1, 1);
    //ReadReadUInt();



uint string_pointer_array[list_item_count];  // 2424/4 = 606
// total size of the string blob => 23724 bytes
// maximum size of incremental numbers => 23669

// addr 23669 points to the last string minus 4 (an uint as big as the field itself)
// each pointer is relative to the string blob start minus its own size
// str_base + (str_ptr - 4)
//    19412 + (23644   - 4) $ 43048 [A828h] (nope)
//    19412 + (23669   - 4) = 43077 [A845h]


// wait, it's simpler than that, measuring from the right location
// back it gives us the original pointer position, like this:

// cur_offset + contents = string_start
//      16988 +     2424 = 19412 [4BD4h] OK // 1st array entry
//      19404 +    23644 = 43048 [A828h] OK // last - 1
//      19408 +    23669 = 43077 [A845h] OK // last


//string str; // at 0x4BD4 // size: 2Ch
//string strb; // at 0x4BD4 // size: 2Ch
struct
{
    string ss <optimize=false>;
}ss[list_item_count] <optimize=false>;
// 2464 - 2424 >>> Result = 40 [28h]
//2495 - 2464 >>> Result = 31 [1Fh]